function createMVPAparams(params, data)
    if ~exist(params.outDir)
        mkdir(params.outDir)
    end
    rng(params.seed);

    %% load mask and split to beams
    maskImg.data=niftiread(fullfile(params.mask.dir,params.mask.name));
    maskImg.info=niftiinfo(fullfile(params.mask.dir,params.mask.name));
    linearIndex=find(maskImg.data);
    [x,y,z]=ind2sub(size(maskImg.data),linearIndex);
    locations=[x,y,z];
    beamMembersIdx = knnsearch(locations, locations, 'K', params.beamSize); % Find all neighbours in the mask

    %% load data for each condition and create svm files
    base_str = "%d_EV_audiomotor_%d_%sE_%sH.txt";
    log_str = "%d_audiomotor_%d_log.mat";
    ears = [L, R];
    for ear = ears
        % only compute this for experimental runs
        numRuns = params.numRunsPerCondition(params.conditions == "audiomotor")

        for subId=params.subjects
            functionalDir = sprintf(params.functionalDir, subId);
            hands = ["L", "R"];
            for hand = hands
                for runNumber = 1:numRuns
                    featDir = fullfile(functionalDir, ...
                                       sprintf("sub%d_audiomotor_%d_%sE.feat", ...
                                               subId, ...
                                               runNumber, ...
                                               ear));
                    EVDir = sprintf(params.EVDir, subId);
                    EV_filename = sprintf(base_str, ...
                                          subId,...
                                          runNumber,...
                                          ear,...
                                          hand);
                    d = dir(fullfile(EVDir,EV_filename));

                    % this runNum really had auditory input to this ear
                    if ~d.name; continue; end

                    EVPath = fullfile(d.folder, d.name);
                    logFileName = sprintf(log_str, ...
                                          subId,...
                                          runNumber);

                    logFilePath = fullfile(d.folder, logFileName);

                    % transform the scan to MNI space
                    tranformFeatDirToMNI(featDir)

                    % calculate percent-signal-change
                    functionalData = calcPercentSignalChange(featDir)

                    %get TRs where we sample the data
                    log = load(logFilePath)
                    TRs = log.block_end_times;
                    tempData = percentChangeData(:,:,:,TRs);
                    allData.(hand) = tempData(linearIndex);
                end % for runNumber
            end % for hand

            % equalize sample number between hands
            RHSamples = size(allData.R,1);
            LHSamples = size(allData.L,1);
            numToTrim = abs(RHSamples - LHSamples);
            removeIdx = datasample(1:min(RHSamples, ...
                                         LHSamples), ...
                                   numToTrim, ...
                                   'Replace', ...
                                   false);
            mask = ones(1, max(RHSamples, LHSamples));
            mask(removeIdx) = 0;
            if RHSamples > LHSamples
                allData.R = allData.R(mask > 0,:);
            else
                allData.L= allData.L(mask > 0,:);
            end
            RHSamples = size(allData.R,1);
            LHSamples = size(allData.L,1);

            % construct labels and factor
            tempData=[allData.R; allData.L];

            % 1 = RH; 2 = LH
            labels=[ones(RHSamples,1);ones(LHSamples,1) * 2];
            factor=ones(1,length(labels));

            % construct the final data matrix
            data=zeros(length(labels),params.beamSize,length(linearIndex));
            for centralVoxelIdx=1:length(linearIndex)
                data(:,:,centralVoxelIdx) = ...
                    tempData(:,beamMembersIdx(centralVoxelIdx,:));
            end

            % write to file
            save(fullfile(params.outDir, ...
                          sprintf("%d_MPVA_audiomotor_%sE", subId, ear)), ...
                 'data', ...
                 'factor', ...
                 'labels', ...
                 'locations', ...
                 'linearIndex', ...
                 'params', ...
                 'maskImg', ...
                 '-v7.3');
        end % for subId
    end % for ear
end


function tranformFeatDirToMNI(featDir)
    if ~exist(fullfile(featDir,'filtered_func_data_MNI.nii.gz'),'file') ...
            ||params.override
        cmd = ['applywarp -i ', ...
               (fullfile(featDir, 'filtered_func_data.nii.gz')), ...
               ' -o ', ...
               (fullfile(featDir, 'filtered_func_data_MNI.nii.gz')), ...
               ' -r ', ...
               fullfile(featDir, 'reg', 'standard'), ...
               ' --warp=' , ...
               fullfile(featDir, 'reg', 'highres2standard_warp'), ...
               ' --premat=', ...
               fullfile(featDir, 'reg', 'example_func2highres.mat')];
        unix(cmd);
        disp(['finished MNI transform for sub ', ...
              num2str(subId), ...
              ' ', ...
              cond, ...
              ' condition run ', ...
              num2str(r)]);
    else
        disp(['MNI transform for sub ', ...
              num2str(params.subjects(s)), ...
              ' ', ...
              cond, ...
              ' condition run ', ...
              num2str(runNumber), ...
              ' already exist']);
    end
end

function calcPercentSignalChange(featDir)
    functionalData = niftiread(fullfile(featDir,'filtered_func_data_MNI.nii.gz'));
    percentChangeData=functionalData./mean(funcData,4)*100-100;
end
